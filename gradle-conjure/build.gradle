/*
 * (c) Copyright 2018 Palantir Technologies Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import net.ltgt.gradle.errorprone.CheckSeverity

apply plugin: 'groovy'
apply plugin: 'java-gradle-plugin'
apply plugin: 'com.palantir.external-publish-jar'
apply plugin: 'com.palantir.external-publish-gradle-plugin'

dependencies {
    implementation project(':gradle-conjure-api')
    implementation 'com.google.guava:guava'
    implementation 'com.palantir.sls.versions:sls-versions'
    implementation 'com.palantir.conjure.java.runtime:conjure-java-jackson-serialization'
    implementation 'com.palantir.sls-packaging:gradle-recommended-product-dependencies'
    implementation 'commons-io:commons-io'
    implementation 'org.apache.commons:commons-lang3'
    implementation 'net.bytebuddy:byte-buddy'

    annotationProcessor 'org.immutables:value'
    compileOnly 'org.immutables:value::annotations'

    testImplementation gradleTestKit()
    testImplementation 'com.netflix.nebula:nebula-test'
    testImplementation 'com.squareup.okhttp3:mockwebserver'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine', {
        because 'allows JUnit 3 and JUnit 4 tests to run'
    }
}

gradlePlugin {
    plugins {
        conjure {
            id = 'com.palantir.conjure'
            implementationClass = 'com.palantir.gradle.conjure.ConjurePlugin'
        }
        conjurePublish {
            id = 'com.palantir.conjure-publish'
            implementationClass = 'com.palantir.gradle.conjure.ConjurePublishPlugin'
        }
        conjureLocal {
            id = 'com.palantir.conjure-local'
            implementationClass = 'com.palantir.gradle.conjure.ConjureLocalPlugin'
        }
        conjureJavaLocal {
            id = 'com.palantir.conjure-java-local'
            implementationClass = 'com.palantir.gradle.conjure.ConjureJavaLocalCodegenPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/palantir/gradle-conjure'
    vcsUrl = 'https://github.com/palantir/gradle-conjure'
    description = 'Gradle conjure is a gradle plugin integration for conjure generators'
    tags = ['conjure', 'code gen']

    plugins {
        conjure {
            displayName = 'Palantir GradleConjure Plugin'
        }
        conjurePublish {
            displayName = 'Palantir Gradle Conjure Publish Plugin'
        }
        conjureLocal {
            displayName = 'Palantir Gradle Conjure Local Plugin'
        }
        conjureJavaLocal {
            displayName = 'Palantir Gradle Conjure Java Local Plugin'
        }
    }
}

idea {
    module {
        testSourceDirs += file("src/test/groovy")
    }
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone {
        check('Slf4jLogsafeArgs', CheckSeverity.OFF)
    }
}


test {
    environment "REGISTRY_USERNAME", "user"
    environment "REGISTRY_PASSWORD", "pass"
}